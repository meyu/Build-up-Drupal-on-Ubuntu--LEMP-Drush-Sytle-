{"name":"Install-nginx--mariadb--php--adminer-and-varnish-on-ubuntu--lemp-varnish-","tagline":"於 Ubuntu 上安裝 LEMP+Varnish (Nginx, MariaDB, PHP, Adminer, Varnish)","body":"所為何來\r\n=\r\n於 Ubuntu 上安裝 Nignx 做為網站伺服器，搭配 MariaDB 資料庫及 PHP 指令碼語言 (即 LEMP 架構)，並以 Adminer 做為資料庫管理工具，再另外加裝 Varnish 反向網站快取伺服器 (HTTP 加速器的一種)。  \r\n本文將列出相對簡易之安裝步驟，供需求者參考。\r\n\r\n使用環境\r\n=\r\nUbuntu Server 12.04  \r\nNginx 1.5.3  \r\nMariaDB 5.5.32  \r\nPHP 5.3.10 \r\nAdminer 3.7.1  \r\nVarnish 3.0.4   \r\n\r\n安裝方式\r\n=\r\n###安裝 MariaDB\r\n登入 Ubuntu 後，於終端機中輸入以下指令，以下載及安裝 MariaDB 和相關套件：  \r\n(本文安裝的版本為 5.5，欲安裝其它版本者，可至 [MariaDB 官網](https://downloads.mariadb.org/mariadb/repositories/) 取得下載指令，並替代以下指令的一至三行)\r\n```bash\r\nsudo apt-get install python-software-properties && \r\nsudo apt-key adv --recv-keys --keyserver keyserver.ubuntu.com 0xcbcb082a1bb943db && \r\nsudo add-apt-repository 'deb http://ftp.yz.yamagata-u.ac.jp/pub/dbms/mariadb/repo/5.5/ubuntu precise main' && \r\nsudo apt-get update && \r\nsudo apt-get install mariadb-server libapache2-mod-auth-mysql php5-mysql\r\n```\r\n安裝過程中，請設定資料庫的最高權限使用者 root 的密碼。(本文使用 <code>root.password</code>)  \r\n![Set Password for MariaDB root](https://lh5.googleusercontent.com/-FA1tujVUiDI/UhTDNnFiJYI/AAAAAAAAf8w/z-eoN762eZ0/w826-h551-no/Set+Password+for+MariaDB+root.png)  \r\n接著，請進行安全性設定：\r\n```bash\r\nsudo /usr/bin/mysql_secure_installation\r\n```\r\n過程中，需要輸入 root 的密碼，以提供權限進行設定。(本文 root 的密碼為 <code>root.password</code>)  \r\n```text\r\nEnter current password for root (enter for none): \r\nOK, successfully used password, moving on...\r\n```\r\n詢問是否要更換 root 的密碼時，請選 n。  \r\n再來是幾項安全性的選擇，建議都選擇 y: \r\n```text\r\nBy default, a MySQL installation has an anonymous user, allowing anyone to log into MySQL without having to have a user account created for them.  This is intended only for testing, and to make the installation go a bit smoother.  You should remove them before moving into a production environment.\r\nRemove anonymous users? [Y/n] y                                            \r\n\r\nNormally, root should only be allowed to connect from 'localhost'.  This ensures that someone cannot guess at the root password from the network.\r\nDisallow root login remotely? [Y/n] y\r\n\r\nBy default, MySQL comes with a database named 'test' that anyone can access.  This is also intended only for testing, and should be removed before moving into a production environment.\r\nRemove test database and access to it? [Y/n] y\r\n\r\nReloading the privilege tables will ensure that all changes made so far will take effect immediately.\r\nReload privilege tables now? [Y/n] y\r\n```\r\n\r\n###安裝 Nginx\r\n請輸入：\r\n```bash\r\nsudo apt-get install nginx &&\r\nsudo service nginx start \r\n```\r\n\r\n###安裝 PHP\r\n請輸入以下指令，以安裝PHP，並編輯其設定，以提高安全性：\r\n```bash\r\nsudo apt-get install php5-fpm &&  \r\nsudo nano /etc/php5/fpm/php.ini\r\n```\r\n找到 <code>;cgi.fix_pathinfo=1</code> 這行，將 1 改為 0：  \r\n(記得要刪除句首的分號，以取消其註解狀態)\r\n```text\r\ncgi.fix_pathinfo=0\r\n```\r\n儲存後退出。  \r\n再來，請更改其 php5-fpm 的設定：\r\n```bash\r\nsudo nano /etc/php5/fpm/pool.d/www.conf\r\n```\r\n找到 <code>listen = 127.0.0.1:9000</code> 這行，並將其改為：\r\n```text\r\nlisten = /var/run/php5-fpm.sock\r\n```\r\n儲存後退出。  \r\n接著，請重新啟動 php-fpm：\r\n```bash\r\nsudo service php5-fpm restart\r\n```\r\n\r\n###設定 Nginx\r\n請開啟 Nginx 的 host 預設檔：\r\n```bash\r\nsudo nano /etc/nginx/sites-available/default\r\n```\r\n於 <code>Server {}</code> 段落中進行以下修改：\r\n* 在 <code>index index.html index.htm;</code> 那行中增加 <code>index.php</code> \r\n* 網頁伺服器如有特定域名 (Domain Name) 或 IP，可將 <code>server_name localhost;</code> 中的 <code>localhost</code> 替換為域名或 IP。 \r\n* 取消 <code>location ~ \\.php$ {}</code> 段落的井字註解符號\r\n\r\n段落 <code>Server {}</code> 修改後，將類似：\r\n```text\r\n [...]\r\nserver {\r\n        listen   80;\r\n\r\n        root /usr/share/nginx/www;\r\n        index index.php index.html index.htm;\r\n\r\n        server_name example.com;\r\n\r\n        location / {\r\n                try_files $uri $uri/ /index.html;\r\n        }\r\n\r\n        error_page 404 /404.html;\r\n\r\n        error_page 500 502 503 504 /50x.html;\r\n        location = /50x.html {\r\n              root /usr/share/nginx/www;\r\n        }\r\n\r\n        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000\r\n        location ~ \\.php$ {\r\n                #fastcgi_pass 127.0.0.1:9000;\r\n                # With php5-fpm:\r\n                fastcgi_pass unix:/var/run/php5-fpm.sock;\r\n                fastcgi_index index.php;\r\n                fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;\r\n                include fastcgi_params;\r\n        }\r\n}\r\n[...]\r\n```\r\n儲存後退出，並重新啟動 Nginx：\r\n```bash\r\nsudo service nginx restart\r\n```\r\n\r\n### 測試運作情況\r\n請製作一 PHP 檔：\r\n```bash\r\nsudo nano /usr/share/nginx/www/info.php\r\n```\r\n內容填上：\r\n```text\r\n<?php\r\nphpinfo();\r\n?>\r\n```\r\n儲存後退出，並使用瀏覽器查看您的網頁伺服器，並後綴 URL <code>/info.php</code>。  \r\n(您的網址看起來會類似 http://10.10.10.10/info.php 或 http://example.com/info.php)\r\n出現類似畫面，即代表運作正常：  \r\n![PHP info.php](https://lh6.googleusercontent.com/-wKg6_Oj6tD4/UhTX8RxKh_I/AAAAAAAAf9M/ApyTgXdV_KE/w826-h801-no/PHP+info.php.png)  \r\n如出現錯誤畫面，請再參考一次 Nginx 及 PHP 的設定步驟。\r\n\r\n###安裝 Adminer\r\n請輸入以下指令，以下載並安裝 Adminer：\r\n```bash\r\ncd /usr/share/nginx/www &&\r\nsudo wget http://www.adminer.org/latest.php && \r\nsudo mv latest.php adminer.php\r\n```\r\n使用瀏覽器查看您的網頁伺服器，並後綴 URL <code>/adminer.php</code>。  \r\n(您的網址看起來會類似 http://10.10.10.10/adminer.php 或 http://example.com/adminer.php)\r\n出現類似畫面，即代表運作正常:  \r\n![Adminer Login](https://lh5.googleusercontent.com/-w5QfUEM4RVQ/UhTa9G4DZJI/AAAAAAAAf9k/qKebzhrVhQI/w655-h374-no/adminer.png)  \r\n\r\n###安裝 Varnish\r\n請輸入以下指令，以添加 Varnish 的套件來源，並安裝之：\r\n```bash\r\nsudo curl http://repo.varnish-cache.org/debian/GPG-key.txt | sudo apt-key add - && \r\necho \"deb http://repo.varnish-cache.org/ubuntu/ precise varnish-3.0\" | sudo tee -a /etc/apt/sources.list && \r\nsudo apt-get update && sudo apt-get install varnish\r\n```\r\n\r\n###設定 Varnish 與 Nginx\r\n編輯其 <code>/etc/default/varnish</code>，使 Varnish 前端監聽 Port 80，做為 HTTP 的預設窗口：\r\n```bash\r\nsudo nano /etc/default/varnish\r\n```\r\n在 Alternative 2 的段落中，修改 <code>DAEMON_OPTS</code> 的 -a 參數，由 <code>6081</code> 改為 <code>80</code>：\r\n```text\r\nDAEMON_OPTS=\"-a :80 \\\r\n             -T localhost:6082 \\\r\n             -f /etc/varnish/default.vcl \\\r\n             -S /etc/varnish/secret \\\r\n             -s malloc,256m\"\r\n```\r\n儲存後退出。  \r\n查看 <code>/etc/varnish/default.vcl</code> 的 <code>backend default {}</code> 段落，可知 Varnish 的後端監聽 Port 8080；  \r\n為使 Nginx 能與 Varnish 合作，請再次編輯 <code>/etc/nginx/sites-available/default</code>，使 Nginx 的前端監聽 Port 8080：\r\n```bash\r\nsudo nano /etc/nginx/sites-available/default\r\n```\r\n將 <code>Server {}</code> 段落中首行的 <code>listen 80</code> 改為 <code>8080</code>：\r\n```text\r\n listen  127.0.0.1:8080; ## listen for ipv4; this line is default and implied\r\n```\r\n儲存後退出，並重新啟動 Nginx 及 Varnish。\r\n```bash\r\nsudo service nginx restart && sudo service varnish restart\r\n```\r\n  \r\nDONE.\r\n<br>\r\n<br>\r\n\r\n補充說明\r\n=\r\n* 安全考量下，如您不需要透過網頁介面管理資料庫時，建議移除 Adminer：<code>sudo rm /usr/share/nginx/www/adminer.php</code>\r\n\r\n參考資源\r\n=\r\n* [MariaDB](https://mariadb.org/)\r\n* [Adminer - Database management in single PHP file](http://www.adminer.org/)\r\n* [Installation on Ubuntu | Varnish Community](https://www.varnish-cache.org/installation/ubuntu)\r\n* [Installation | TuxLite](https://tuxlite.com/installation/)\r\n* [How to Install Linux, nginx, MySQL, PHP (LEMP) stack on Ubuntu 12.04 | DigitalOcean](https://www.digitalocean.com/community/articles/how-to-install-linux-nginx-mysql-php-lemp-stack-on-ubuntu-12-04)\r\n* [How to Install Wordpress, Nginx, PHP, and Varnish on Ubuntu 12.04 | DigitalOcean](https://www.digitalocean.com/community/articles/how-to-install-wordpress-nginx-php-and-varnish-on-ubuntu-12-04)\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}